#
#   YIC情報ビジネス専門学校
#       情報システム科　2年
#           竹田　稜斗　(B0021031@ib.yic.ac.jp)
#
import numpy as np

alpha = 0.01

N,M = map(int, input().split())

w = np.array([float(x) for x in input().split()])
train = np.array([[float(x) for x in input().split()] for _ in range(N)])
t = np.array([[float(x) for x in input().split()] for _ in range(M)])
x = train[0:N,0:2]
l = train[0:N,2:3].astype(np.int)

# where で値の判定後、活性化関数で置換する
if np.sum(w*x) < 0:
    y = 0
else:
    y = 1

E = 1 - y

for i in range(len(w)):
    pass





'''
# カードの出し方は3種類
    single, multi, sequence

def Check_move(player_move, cards_ls):
    flag = 0
    for i in range(len(player_move)-1):
        if not 'J' in player_move and cards_ls.index(player_move[0]) > cards_ls.index(player_move[i+1]):    # 「=」が入るかわからない
            break
            flag = 1

    if flag = 0:
        return True
    else:
        return False

def main():
    N, M = map(int, input().split())
    ls = [input().split() for _ in range(N)]
    pleyer_log = [input().split() for _ in range(M)]
    kind_of_cards = ['3', '4', '5', '6', '7', '8', '9', '10'. '11'. '12'. '13'. '1'. '2'. 'J']
    lastest_situation, pass_cnt = -1, 0

    for player_move in player_log:
        if pass_cnt != N-1 and player_move[0] != 'pass' and lastest_situation < player_move[0]:
            Check_move(player_move, kind_of_cards)
            lastest_situation = player_move[-1]
            pass_cnt = 0
        elif player_move[0] == 'pass':
            pass_cnt += 1
        elif pass_cnt == N-1:
            pass_cnt = 0
        

def __name__ == '__main__':
    main()

'''
'''
N = int(input())
letter = [input().split() for _ in range(N)]
rough_indication = [['A', 0], ['B', 0], ['C', 0], ['D', 0], ['E', 0], ['F', 0], ['G', 0], ['H', 0], ['I', 0],
                    ['J', 0], ['K', 0], ['L', 0],  ['M', 0], ['N', 0], ['O', 0], ['P', 0], ['Q', 0], ['R', 0],
                    ['S', 0], ['T', 0], ['U', 0], ['V', 0], ['W', 0], ['X', 0], ['Y', 0], ['Z', 0],
                    ['a', 0], ['b', 0], ['c', 0], ['d', 0], ['e', 0], ['f', 0], ['g', 0], ['h', 0], ['i', 0],
                    ['j', 0], ['k', 0], ['l', 0], ['m', 0], ['n', 0], ['o', 0], ['p', 0], ['q', 0], ['r', 0],
                    ['s', 0], ['t', 0], ['u', 0], ['v', 0], ['w', 0], ['x', 0], ['y', 0], ['z', 0],
]

print(letter)
'''
'''
ls = {}

for i in range(26):
    ascii_cord = ord('A') + i    #0x41
    ascii_str = chr(ascii_cord)
    print(ascii_cord, ascii_str)
    ls[ascii_str] = 0

    ascii_cord = ord('a') + i
    ascii_str = chr(ascii_cord)
    print(ascii_cord, ascii_str)
    ls[ascii_str] = 0


print(ls)
'''
'''
for line in letter:
    for list in line:
        for elm in list:
            print(elm)
            if elm != ',' or elm != '.' or elm != "'" or elm != ' ':
                if elm.isupper() == True: 
                    index = ord(elm) - 65
                else:
                    index = ord(elm) - 71
                rough_indication[index][1] += 1

for ls in rough_indication:
    print(ls[0], ':', ls[1])
'''



'''
month_date = list(map(int, input().split()))
priority_month = [4, 6, 9, 11]
usual_month = [1, 3, 5, 7, 8, 10, 12]
sum_date = 0

# 日にちの差
diff_date = month_date[1] - month_date[3]
if diff_date < 0:
    diff_date = -1 * diff_date

# 月の差
diff_month = (month_date[0] - month_date[2]) // 2       # 商を代入
if diff_month < 0:
    diff_month = -1 * diff_month

# 月で場合分け
if month_date[0] > month_date[2]:
    first_month = month_date[0] + diff_month
    next_month = first_month + 1

    if first_month == 2:
        sum_date -= 28 - month_date[0]
    elif first_month in priority_month:
        sum_date -= 30 - month_date[0]

    for month in range(month_date[0], month_date[2] + 1):   # 日付処理
        if month == next_month:                             # 最後の時
            sum += month
        elif month in priority_month:
            sum_date += 30
        elif month == 2:
            sum_date += 28
        else:
            sum_date += 31
    half_sum_date = sum_date // 2
    
    for month in range(first_month, next_month + 1):
        pass

elif month_date[0] < month_date[2]:
    first_month = month_date[2] + diff_month
    next_month = first_month + 1
    for month in range(month_date[2], month_date[0] + 1):   # 日付処理
        pass
else:                                                   # 月が同じとき(日付のみの処理)
    pass


if month_date[0] == 2 or month_date[2] == 2:
    if month_date[0] == 2 and month_date[2] == 2:
        diff = month_date[1] - month_date[3]
        if diff < 0:
            diff = -1 * diff
    elif month_date[0] == 2:
        pass
        

elif month_date[0] in priority_month or month_date[2] in priority_month:
    pass
else:
    pass
'''
'''
# 条件がわからない！（笑）
sandwich = list(input())
ls= []
cnt = 1

# 左右のパンの種類と個数
for i in range(1, len(sandwich)):
    if sandwich[i] == sandwich[0]:
        cnt += 1
    else:
        break

if sandwich[:cnt] == sandwich[-cnt:] and cnt == 3:
    print('Yes')
elif sandwich[0] == sandwich[-1]:
    for elm in sandwich:
        if ls.count(elm) == 0:
            ls += [elm]
    if len(ls) > 2:
        print('Yes')
    else:
        print('No')
else:
    print('No')
'''

